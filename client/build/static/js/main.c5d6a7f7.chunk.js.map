{"version":3,"sources":["reducers/index.js","store/index.js","contexts/EthContext/EthContext.js","contexts/EthContext/state.js","contexts/EthContext/EthProvider.jsx","contexts/EthContext/useEth.js","selectors/findContract.js","components/Header/index.jsx","components/Hero/logo-eth.png","components/Hero/index.jsx","components/StakingList/StakingItem.jsx","components/StakingList/index.jsx","components/Home/index.jsx","components/Staking/index.jsx","components/Unstake/index.jsx","components/Rewards/index.jsx","components/StakeHistory/index.jsx","components/Footer/index.jsx","App.jsx","index.js"],"names":["initialState","logged","account","stakeInputValue","unstakeInputValue","tokens","name","symbol","apr","price","totalStaked","stakedBalance","estimatedFAMRewards","initialStakingDate","earnedFAM","depositEvents","withdrawEvents","reducer","state","action","type","value","FAMToken","find","token","tokenToStake","parseInt","newStateTokens","filter","push","tokenToUnstake","Number","event","events","tokenToUpdate","parseFloat","toFixed","enhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","EthContext","createContext","actions","artifact","web3","accounts","networkID","contract","data","Error","EthProvider","children","useReducer","dispatch","init","useCallback","Web3","givenProvider","eth","requestAccounts","net","getId","address","forEach","item","newAddress","networks","Contract","abi","err","console","error","useEffect","tryInit","require","handleChange","e","ethereum","on","removeListener","Provider","useEth","useContext","findContract","artifacts","contracts","contractName","correctAddr","options","Header","useDispatch","DAIStakeContract","FAMStakeContract","ETHStakeContract","getPastEvents","fromBlock","toBlock","daiDepositEvents","famDepositEvents","ethDepositEvents","cleanedDaiDepositEvents","map","userAddress","returnValues","amount","cleanedFamDepositEvents","cleanedEthDepositEvents","methods","getLatestPrice","call","from","DAIRate","ETHRate","daiWithdrawEvents","famWithdrawEvents","ethWithdrawEvents","cleanedDaiWithdrawEvents","cleanedFamWithdrawEvents","cleanedEthWithdrawEvents","log","getTotalStaked","getStakedBalance","getBalance","loadDepositEvents","loadWithdrawEvents","loadDAIStats","loadFAMStats","loadETHStats","updateDAIRate","updateETHRate","className","Icon","size","isActive","to","List","horizontal","relaxed","Item","href","disabled","Button","basic","color","Hero","as","Subheader","Image","src","logoEth","StakingItem","Card","raised","Content","textAlign","Meta","Description","extra","fluid","Link","StakingList","useSelector","id","Group","centered","itemsPerRow","Home","Staking","useParams","inputValue","tokenToDisplay","handleStake","TokenContract","TokenStakingContract","tempValue","replace","utils","toWei","allowance","approve","send","deposit","receipt","returnedValues","DepositRegistered","cleanedDepositEvent","alert","location","handleDaiFaucet","DAIContract","faucet","toBN","handleFamFaucet","FAMContract","onClick","Form","onSubmit","Field","placeholder","onChange","evt","target","fromWei","handleUnstake","withdraw","WithdrawRegistered","cleanedWithdrawEvent","Rewards","FAM","Segment","floated","StakeHistory","Table","celled","Row","HeaderCell","Body","Cell","Footer","rel","App","path","element","Unstake","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.c5d6a7f7.chunk.js","sourcesContent":["export const initialState = {\n  logged: false,\n  account: null,\n  stakeInputValue: '',\n  unstakeInputValue: '',\n  tokens: [\n    {\n      name: 'Ethereum',\n      symbol: 'ETH',\n      apr: 0.039,\n      price: 1602,\n      totalStaked: 0,\n      stakedBalance: 0,\n      estimatedFAMRewards: 0,\n      initialStakingDate: null,\n      earnedFAM: 0,\n    },\n    {\n      name: 'Dai',\n      symbol: 'DAI',\n      apr: 0.027,\n      price: 1,\n      totalStaked: 0,\n      stakedBalance: 0,\n      estimatedFAMRewards: 0,\n      initialStakingDate: null,\n      earnedFAM: 0,\n    },\n    {\n      name: 'Family token',\n      symbol: 'FAM',\n      apr: 0.1,\n      price: 17,\n      totalStaked: 0,\n      stakedBalance: 0,\n      estimatedFAMRewards: 0,\n      initialStakingDate: null,\n      earnedFAM: 0,\n    },\n  ],\n  depositEvents: [],\n  withdrawEvents: [],\n};\n\nconst reducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case 'CHANGE_STAKING_VALUE':\n      return {\n        ...state,\n        stakeInputValue: action.value,\n      }\n    case 'CHANGE_UNSTAKING_VALUE':\n      return {\n        ...state,\n        unstakeInputValue: action.value,\n      }\n    case 'STAKE': {\n      // On recup le token FAM\n      const FAMToken = state.tokens.find((token) => token.symbol === \"FAM\");\n      // On recup le token a stake\n      const tokenToStake = state.tokens.find((token) => token.symbol === action.token);\n      // On rajoute le montant a stake\n      tokenToStake.totalStaked += parseInt(state.stakeInputValue);\n      // Calcul des estimated rewards en FAM\n      tokenToStake.estimatedFAMRewards = (tokenToStake.price * tokenToStake.totalStaked * tokenToStake.apr) / FAMToken.price;\n      // Nouvelle version du state.tokens sans le token à rajouter\n      const newStateTokens = state.tokens.filter((token) => token.symbol !== action.token);\n      newStateTokens.push(tokenToStake);\n      \n      return {\n        ...state,\n        stakeInputValue: '',\n        tokens: [\n          ...newStateTokens\n        ]\n      }\n    }\n    case 'UNSTAKE': {\n      const tokenToUnstake = state.tokens.find((token) => token.symbol === action.token);\n      tokenToUnstake.totalStaked = tokenToUnstake.totalStaked - Number(state.unstakeInputValue);\n      tokenToUnstake.estimatedFAMRewards = 0;\n      // TODO: Fonction calcul rewards \n      tokenToUnstake.earnedFAM += 0.04712;\n      // Nouvelle version du state.tokens sans le token à rajouter\n      const newStateTokens = state.tokens.filter((token) => token.symbol !== action.token);\n      newStateTokens.push(tokenToUnstake);\n      return {\n        ...state,\n        unstakeInputValue: '',\n        tokens: [\n          ...newStateTokens\n        ]\n      }\n    }\n    case 'DEPOSIT_EVENT': {\n      return {\n        ...state,\n        depositEvents: [\n          ...state.depositEvents,\n          action.event,\n        ]\n      }\n    }\n    case 'GET_PAST_DEPOSIT_EVENTS': {\n      return {\n        ...state,\n        depositEvents: action.events,\n      }\n    }\n    case 'UPDATE_STAKED_AMOUNTS': {\n      // On recup le token a update\n      const tokenToUpdate = state.tokens.find((token) => token.symbol === action.token.symbol);\n      // On rajoute le montant a stake\n      tokenToUpdate.totalStaked += parseInt(action.token.totalStaked);\n      tokenToUpdate.stakedBalance = parseInt(action.token.stakedBalance);\n      // Nouvelle version du state.tokens sans le token à rajouter\n      const newStateTokens = state.tokens.filter((token) => token.symbol !== action.token.symbol);\n      newStateTokens.push(tokenToUpdate);\n      return {\n        ...state,\n        tokens: [\n          ...newStateTokens,\n        ],\n      }\n    }\n    case 'UPDATE_RATES': {\n      // On recup le token a update\n      const tokenToUpdate = state.tokens.find((token) => token.symbol === action.token.symbol);\n      // On rajoute le montant a stake\n      tokenToUpdate.price = parseFloat(parseFloat(action.token.price / 10**18).toFixed(2));\n      // Nouvelle version du state.tokens sans le token à rajouter\n      const newStateTokens = state.tokens.filter((token) => token.symbol !== action.token.symbol);\n      newStateTokens.push(tokenToUpdate);\n      return {\n        ...state,\n        tokens: [\n          ...newStateTokens,\n        ],\n      }\n    }\n    case 'GET_PAST_WITHDRAW_EVENTS': {\n      return {\n        ...state,\n        withdrawEvents: action.events,\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import { createStore, applyMiddleware, compose } from 'redux';\n\nimport reducer from '../reducers';\n\n// import debugMiddleWare from '../middlewares/debug';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst enhancers = composeEnhancers(\n  // On branche nos middlewares au store\n  // applyMiddleware(debugMiddleWare),\n);\n\nconst store = createStore(reducer, enhancers);\n\nexport default store;","import { createContext } from \"react\";\n\nconst EthContext = createContext();\n\nexport default EthContext;\n","const actions = {\n  init: \"INIT\",\n};\n\nconst initialState = {\n  artifact: null,\n  web3: null,\n  accounts: null,\n  networkID: null,\n  contract: null\n};\n\nconst reducer = (state, action) => {\n  const { type, data } = action;\n  switch (type) {\n    case actions.init:\n      return { ...state, ...data };\n    default:\n      throw new Error(\"Undefined reducer action type\");\n  }\n};\n\nexport {\n  actions,\n  initialState,\n  reducer\n};\n","import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const init = useCallback(\n    async artifact => {\n      if (artifact) {\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n        const accounts = await web3.eth.requestAccounts();\n        const networkID = await web3.eth.net.getId();\n        // const { abi } = artifact;\n        let address = [];\n        let contract = [];\n        try {\n          artifact.forEach((item) => {\n            const newAddress = item.networks[networkID].address;\n            address.push(newAddress);\n            contract.push(new web3.eth.Contract(item.abi, newAddress));\n          })\n          // address = artifact.networks[networkID].address;\n          // contract = new web3.eth.Contract(abi, address);\n        } catch (err) {\n          console.error(err);\n        }\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract }\n        });\n      }\n    }, []);\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = [\n          require(\"../../contracts/FAM.json\"),\n          require(\"../../contracts/DAI.json\"),\n          require(\"../../contracts/DAIStake.json\"),\n          require(\"../../contracts/ETHStake.json\"),\n          require(\"../../contracts/DataFeedETHUSD.json\"),\n          require(\"../../contracts/DataFeedDAIUSD.json\"),\n          require(\"../../contracts/FAMStake.json\"),\n          // ...\n          // Others contracts here\n          // ...\n        ];\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n\n  return (\n    <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      {children}\n    </EthContext.Provider>\n  );\n}\n\nexport default EthProvider;\n","import { useContext } from \"react\";\nimport EthContext from \"./EthContext\";\n\nconst useEth = () => useContext(EthContext);\n\nexport default useEth;\n","const findContract = (artifacts, contracts, networkID, contractName) => {\n  const correctArtifact = artifacts.find((artifact) => artifact.contractName === contractName);\n  const correctAddr = correctArtifact.networks[networkID].address;\n  const correctContract = contracts.find((contract) => contract.options.address === correctAddr);\n  return correctContract;\n}\n\nexport default findContract;","// == Import\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Icon, List, Button } from 'semantic-ui-react';\nimport { NavLink } from 'react-router-dom';\nimport { useEth } from \"../../contexts/EthContext\";\nimport findContract from '../../selectors/findContract';\nimport './header.scss';\n\n// == Composant\nfunction Header() {\n  const dispatch = useDispatch();\n  const { state: { accounts, artifact, contract, networkID } } = useEth();\n\n  useEffect(() => {\n    async function loadDepositEvents() {\n      if (contract) {\n        // Instances des contracts\n        const DAIStakeContract = findContract(artifact, contract, networkID, \"DAIStake\");\n        const FAMStakeContract = findContract(artifact, contract, networkID, \"FAMStake\");\n        const ETHStakeContract = findContract(artifact, contract, networkID, \"ETHStake\");\n\n        // Recup des events passés\n        const daiDepositEvents = await DAIStakeContract.getPastEvents('DepositRegistered', {fromBlock: 0, toBlock: \"latest\"});\n        const famDepositEvents = await FAMStakeContract.getPastEvents('DepositRegistered', {fromBlock: 0, toBlock: \"latest\"});\n        const ethDepositEvents = await ETHStakeContract.getPastEvents('DepositRegistered', {fromBlock: 0, toBlock: \"latest\"});\n\n        // Mise en forme des données dans un tableau plus facilement exploitable\n        let depositEvents = [];\n        const cleanedDaiDepositEvents = daiDepositEvents.map((event) => {\n          return {\n            userAddress: event.returnValues.userAddress,\n            amount: event.returnValues.amount,\n            symbol: \"DAI\"\n          }\n        });\n        const cleanedFamDepositEvents = famDepositEvents.map((event) => {\n          return {\n            userAddress: event.returnValues.userAddress,\n            amount: event.returnValues.amount,\n            symbol: \"FAM\"\n          }\n        });\n        const cleanedEthDepositEvents = ethDepositEvents.map((event) => {\n          return {\n            userAddress: event.returnValues.userAddress,\n            amount: event.returnValues.amount,\n            symbol: \"ETH\"\n          }\n        });\n\n        // On crée un tableau contenant tous les events (tous tokens confondus)\n        depositEvents.push(\n          ...cleanedDaiDepositEvents,\n          ...cleanedFamDepositEvents ,\n          ...cleanedEthDepositEvents\n        );\n        // console.log(depositEvents);\n      \n        // On mémorise ce tableau dans le store\n        dispatch({ type: 'GET_PAST_DEPOSIT_EVENTS', events: depositEvents });\n      }\n    };\n    \n    async function updateDAIRate(){\n      if(contract){\n        const DAIStakeContract = findContract(artifact, contract, networkID, \"DataFeedDAIUSD\");\n        const DAIRate = await DAIStakeContract.methods.getLatestPrice().call({from: accounts[0]});\n        const token = {\n          symbol: \"DAI\",\n          price: DAIRate\n        }\n        dispatch({type: 'UPDATE_RATES', token: token});\n      }\n    };\n\n    async function updateETHRate(){\n      if(contract){\n        const ETHStakeContract = findContract(artifact, contract, networkID, \"DataFeedETHUSD\");\n        const ETHRate = await ETHStakeContract.methods.getLatestPrice().call({from: accounts[0]});\n        const token = {\n          symbol: \"ETH\",\n          price: ETHRate\n        }\n        dispatch({type: 'UPDATE_RATES', token: token});\n      }\n    };\n\n    async function loadWithdrawEvents() {\n      if (contract) {\n        // Instances des contracts\n        const DAIStakeContract = findContract(artifact, contract, networkID, \"DAIStake\");\n        const FAMStakeContract = findContract(artifact, contract, networkID, \"FAMStake\");\n        const ETHStakeContract = findContract(artifact, contract, networkID, \"ETHStake\");\n\n        // Recup des events passés\n        const daiWithdrawEvents = await DAIStakeContract.getPastEvents('WithdrawRegistered', {fromBlock: 0, toBlock: \"latest\"});\n        const famWithdrawEvents = await FAMStakeContract.getPastEvents('WithdrawRegistered', {fromBlock: 0, toBlock: \"latest\"});\n        const ethWithdrawEvents = await ETHStakeContract.getPastEvents('WithdrawRegistered', {fromBlock: 0, toBlock: \"latest\"});\n\n        // Mise en forme des données dans un tableau plus facilement exploitable\n        let withdrawEvents = [];\n        const cleanedDaiWithdrawEvents = daiWithdrawEvents.map((event) => {\n          return {\n            userAddress: event.returnValues.userAddress,\n            amount: event.returnValues.amount,\n            symbol: \"DAI\"\n          }\n        });\n        const cleanedFamWithdrawEvents = famWithdrawEvents.map((event) => {\n          return {\n            userAddress: event.returnValues.userAddress,\n            amount: event.returnValues.amount,\n            symbol: \"FAM\"\n          }\n        });\n        const cleanedEthWithdrawEvents = ethWithdrawEvents.map((event) => {\n          return {\n            userAddress: event.returnValues.userAddress,\n            amount: event.returnValues.amount,\n            symbol: \"ETH\"\n          }\n        });\n\n        // On crée un tableau contenant tous les events (tous tokens confondus)\n        withdrawEvents.push(\n          ...cleanedDaiWithdrawEvents,\n          ...cleanedFamWithdrawEvents ,\n          ...cleanedEthWithdrawEvents\n        );\n        console.log(withdrawEvents);\n      \n        // On mémorise ce tableau dans le store\n        dispatch({ type: 'GET_PAST_WITHDRAW_EVENTS', events: withdrawEvents });\n      }\n    };\n    \n    async function loadDAIStats() {\n      if (contract) {\n        const DAIStakeContract = findContract(artifact, contract, networkID, \"DAIStake\");\n        const totalStaked = await DAIStakeContract.methods.getTotalStaked().call({ from: accounts[0] });\n        const stakedBalance = await DAIStakeContract.methods.getStakedBalance(accounts[0]).call({ from: accounts[0] });\n        const token = {\n          symbol: \"DAI\",\n          totalStaked: totalStaked,\n          stakedBalance: stakedBalance\n        };\n        dispatch({ type: 'UPDATE_STAKED_AMOUNTS', token: token });\n      }\n    };\n\n    async function loadFAMStats() {\n      if (contract) {\n        const FAMStakeContract = findContract(artifact, contract, networkID, \"FAMStake\");\n        const totalStaked = await FAMStakeContract.methods.getTotalStaked().call({ from: accounts[0] });\n        const stakedBalance = await FAMStakeContract.methods.getBalance(accounts[0]).call({ from: accounts[0] });\n        const token = {\n          symbol: \"FAM\",\n          totalStaked: totalStaked,\n          stakedBalance: stakedBalance\n        };\n        dispatch({ type: 'UPDATE_STAKED_AMOUNTS', token: token });\n      }\n    };\n\n    async function loadETHStats() {\n      if (contract) {\n        const ETHStakeContract = findContract(artifact, contract, networkID, \"ETHStake\");\n        const totalStaked = await ETHStakeContract.methods.getTotalStaked().call({ from: accounts[0] });\n        const stakedBalance = await ETHStakeContract.methods.getBalance(accounts[0]).call({ from: accounts[0] });\n        const token = {\n          symbol: \"ETH\",\n          totalStaked: totalStaked,\n          stakedBalance: stakedBalance\n        };\n        dispatch({ type: 'UPDATE_STAKED_AMOUNTS', token: token });\n      }\n    };\n\n    loadDepositEvents();\n    loadWithdrawEvents();\n    loadDAIStats();\n    loadFAMStats();\n    loadETHStats();\n    updateDAIRate();\n    updateETHRate();\n  }, [contract]);\n\n  return (\n    <header className=\"landing-header\">\n      <div className=\"landing-header-left\">\n\n        <div className=\"landing-header-logo\">\n          <Icon name='ethereum' size='big' />\n          <NavLink\n              className={({ isActive }) => (isActive ? 'menu-link--active' : 'menu-link')}\n              to=\"/Family-staking/\"\n            >\n              <h1>Family Staking</h1>\n            </NavLink>\n        </div>\n\n        <List horizontal relaxed='very'>\n          <List.Item>\n            <a\n              className=\"menu-link\"\n              href=\"/Family-staking/#stacking-list-anchor\"\n            >\n              Staking\n            </a>\n          </List.Item>\n          <List.Item disabled>\n            <NavLink\n              className={({ isActive }) => (isActive ? 'menu-link--active' : 'menu-link menu-link--disabled')}\n              to=\"/Family-staking/liquidity\"\n            >\n              Liquidity pools <span className=\"menu-link--coming-soon\">soon</span>\n            </NavLink>\n          </List.Item>\n          <List.Item>\n            <NavLink\n              className={({ isActive }) => (isActive ? 'menu-link--active' : 'menu-link')}\n              to=\"/Family-staking/rewards\"\n            >\n              Rewards\n            </NavLink>\n          </List.Item>\n          <List.Item>\n            <NavLink\n              className={({ isActive }) => (isActive ? 'menu-link--active' : 'menu-link')}\n              to=\"/Family-staking/history\"\n            >\n              History\n            </NavLink>\n          </List.Item>\n        </List>\n\n      </div>\n      \n      {accounts && \n        <Button basic color='purple' size='small'>\n          <Icon name='user' />\n          <p>{accounts[0]}</p>\n        </Button>\n      }\n    </header>\n  );\n}\n\n// == Export\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/logo-eth.abfed3ce.png\";","// == Import\nimport { Image, Header, Button } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n// import PropTypesLib from 'prop-types';\nimport logoEth from './logo-eth.png';\nimport './hero.scss';\n\n// == Composant\nfunction Hero() {\n  return (\n    <div className=\"hero\">\n      <Header as='h2' className=\"hero-title\">\n        Bienvenue chez <strong>Family Staking</strong>\n        <Header.Subheader className=\"hero-subtitle\">\n          Venez construire un avenir financier confortable pour vous et votre famille\n        </Header.Subheader>\n        <Button color='purple' size='massive' className=\"hero-button\" as=\"a\" href=\"/Family-staking/#stacking-list-anchor\">\n          Stake Now\n        </Button>\n      </Header>\n      <Image src={logoEth} size='large' />\n    </div>\n  );\n}\n\n// == Export\nexport default Hero;\n","// == Import\nimport { Link } from 'react-router-dom';\nimport { Card, Button } from 'semantic-ui-react';\n\n// == Composant\nfunction StakingItem({ name, symbol, apr }) {\n  return (\n    <Card className=\"staking-item\" raised>\n      <Card.Content textAlign=\"center\">\n        <Card.Header className=\"staking-item-title\">{name}</Card.Header>\n        <Card.Meta className=\"staking-item-meta\">Stake any amount of {symbol} and earn daily staking rewards.</Card.Meta>\n        <Card.Description>\n          APR <span className=\"staking-item-apr-info\">estimated for 1 year</span> <br/> <strong className=\"staking-item-apr\">{apr * 100}%</strong>\n        </Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <Button fluid color='purple' className=\"staking-item-button\" as={Link} to={`/Family-staking/stake/${symbol}`}>\n          Stake Now\n        </Button>\n      </Card.Content>\n    </Card>\n  );\n}\n\n// == Export\nexport default StakingItem;\n","// == Import\nimport { Header, Card } from 'semantic-ui-react';\nimport { useSelector } from 'react-redux';\nimport StakingItem from './StakingItem';\nimport './stacking-list.scss';\n\n// == Composant\nfunction StakingList() {\n  const tokens = useSelector((state) => state.tokens);\n  \n  return (\n    <div className=\"stacking-list\" id=\"stacking-list-anchor\">\n      <Header as='h2' className=\"stacking-list-title\" textAlign='center'>\n        Supported tokens\n      <Header.Subheader className=\"stacking-list-subtitle\">\n        Family Staking vous permet de faire travailler vos tokens. <br />\n        Commencez à gagner des revenus passifs dès maintenant !\n      </Header.Subheader>\n      </Header>\n\n    <Card.Group className=\"staking-items\" centered itemsPerRow={3}>\n      {tokens.map((token) => <StakingItem key={token.symbol} {...token} />)}\n    </Card.Group>\n    </div>\n  );\n}\n\n// == Export\nexport default StakingList;\n","// == Import\n// import PropTypesLib from 'prop-types';\nimport Hero from '../Hero';\nimport StakingList from '../StakingList';\nimport './home.scss';\n\n// == Composant\nfunction Home() {\n  return (\n    <main>\n      <Hero />\n      <StakingList />\n    </main>\n  );\n}\n\n// == Export\nexport default Home;\n","/* eslint-disable react-hooks/exhaustive-deps */\n// == Import\nimport { useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Web3 from 'web3';\nimport { useEth } from '../../contexts/EthContext';\nimport findContract from '../../selectors/findContract';\nimport { Header, Card, Button, Form } from 'semantic-ui-react';\nimport './staking.scss';\n\n// == Composant\nfunction Staking() {\n  const dispatch = useDispatch();\n  const { token } = useParams();\n  const tokens = useSelector((state) => state.tokens);\n  const inputValue = useSelector((state) => state.stakeInputValue);\n  const tokenToDisplay = tokens.find((item) => item.symbol === token);\n  const { state: { accounts, artifact, contract, networkID } } = useEth();\n\n  const handleChange = (evt) => {    \n    dispatch({ type: 'CHANGE_STAKING_VALUE', value: evt.target.value });\n  };\n\n  const handleStake = async () => {\n    let TokenContract;\n    let TokenStakingContract;\n\n    // On recup les instances des contracts à utiliser\n    if (token === \"DAI\") {\n      TokenContract = findContract(artifact, contract, networkID, \"DAI\");\n      TokenStakingContract = findContract(artifact, contract, networkID, \"DAIStake\");\n    } else if (token === \"ETH\") {\n      TokenStakingContract = findContract(artifact, contract, networkID, \"ETHStake\");\n    } else if (token === \"FAM\") {\n      TokenContract = findContract(artifact, contract, networkID, \"FAM\");\n      TokenStakingContract = findContract(artifact, contract, networkID, \"FAMStake\");\n    }\n    const tempValue = inputValue.replace(\",\",\".\");\n    const value = Web3.utils.toWei(tempValue, 'ether');\n    //! La gestion de l'allowance n'est pas applicable si on send de l'ETH\n    if (token !== \"ETH\") {\n      // On recup et converti l'allowance du contract de staking sur les tokens de l'account\n      let allowance = await TokenContract.methods.allowance(accounts[0], TokenStakingContract.options.address).call({ from: accounts[0] });\n      allowance = Web3.utils.toWei(allowance, 'ether');\n      \n      // console.log(allowance, value);\n\n      // Si l'allowance n'est pas suffisante\n      if (allowance < value) {\n\n        // On définit la valeur de l'allowance avec la valeur que veut stake l'utilisateur\n        await TokenContract.methods.approve(TokenStakingContract.options.address, value).send({ from: accounts[0] });\n        \n        // On stake\n        const receipt = await TokenStakingContract.methods.deposit(value).send({ from: accounts[0] });\n\n        // On recup l'event\n        const returnedValues = receipt.events.DepositRegistered.returnValues;\n        // On le clean\n        const cleanedDepositEvent = {\n            userAddress: returnedValues.userAddress,\n            amount: returnedValues.amount,\n        }\n        // Et on le mémorise dans le store\n        dispatch({ type: 'DEPOSIT_EVENT', event: cleanedDepositEvent });\n\n        // Un p'tit message pour notifier l'utilisateur\n        alert(`Vous avez bien staké ${inputValue} ${token}`);\n\n      } else {\n\n        // Si l'allowance est suffisante on stake directement\n        const receipt = await TokenStakingContract.methods.deposit(value).send({ from: accounts[0] });\n\n        // On recup l'event\n        const returnedValues = receipt.events.DepositRegistered.returnValues;\n        // On le clean\n        const cleanedDepositEvent = {\n            userAddress: returnedValues.userAddress,\n            amount: returnedValues.amount,\n        }\n        // Et on le mémorise dans le store\n        dispatch({ type: 'DEPOSIT_EVENT', event: cleanedDepositEvent });\n\n        // Un p'tit message pour notifier l'utilisateur\n        alert(`Vous avez bien staké ${returnedValues.amount} ${token}`);\n      }\n    } else {\n      const receipt = await TokenStakingContract.methods.deposit().send({ from: accounts[0], value: parseInt(value) });\n\n      // On recup l'event\n      const returnedValues = receipt.events.DepositRegistered.returnValues;\n      // On le clean\n      const cleanedDepositEvent = {\n          userAddress: returnedValues.userAddress,\n          amount: returnedValues.amount,\n      }\n      // Et on le mémorise dans le store\n      dispatch({ type: 'DEPOSIT_EVENT', event: cleanedDepositEvent });\n\n      // Un p'tit message pour notifier l'utilisateur\n      alert(`Vous avez bien staké ${inputValue} ${token}`);\n    }\n\n    // On refresh pour recup les bonnes infos depuis le SM\n    // La recup se fait dans le composant Header\n    window.location.replace(\"https://remitekky.github.io/Family-staking/\");\n    return false;\n  };\n\n  const handleDaiFaucet = async () => {\n    const DAIContract = findContract(artifact, contract, networkID, \"DAI\");\n    await DAIContract.methods.faucet(accounts[0], Web3.utils.toBN(5000000000000000000)).send({ from: accounts[0] });\n  };\n\n  const handleFamFaucet = async () => {\n    const FAMContract = findContract(artifact, contract, networkID, \"FAM\");\n    await FAMContract.methods.faucet(accounts[0], Web3.utils.toBN(5000000000000000000)).send({ from: accounts[0] });\n  };\n\n  return (\n    <section className=\"staking\">\n      <Header as='h1' className=\"staking-title\">\n        Stake your <strong>{tokenToDisplay.symbol}</strong>\n        <Header.Subheader className=\"hero-subtitle\">\n          {token === \"ETH\" && <span>Précisez le montant à déposer en ETH. Montant minimum : 0,01 ETH</span>}\n          {token === \"DAI\" && <span>Précisez le montant à déposer en DAI. Montant minimum : 0,01 DAI</span>}\n          {token === \"FAM\" && <span>Précisez le montant à déposer en FAM. Montant minimum : 0,01 FAM</span>}\n        </Header.Subheader>\n        {token === \"DAI\" && <Button onClick={handleDaiFaucet}>DAI FAUCET</Button>}\n        {token === \"FAM\" && <Button onClick={handleFamFaucet}>FAM FAUCET</Button>}\n        \n      </Header>\n\n      <Card className=\"staking-item\" raised centered>\n        <Card.Content textAlign=\"center\">\n\n        <Form onSubmit={handleStake}>\n          <Form.Field>\n            <input placeholder='Amount' value={inputValue} onChange={handleChange} />\n          </Form.Field>\n          <Card.Description>\n            <div className=\"staking-datas\">\n              <div className=\"staking-datas-total-stake\">\n                <p>Your staked balance</p>\n                <p>{Web3.utils.fromWei(Web3.utils.toBN(tokenToDisplay.stakedBalance), 'ether')} {tokenToDisplay.symbol}</p>\n              </div>\n              <div className=\"staking-datas-price\">\n                <p>Exchange rate</p>\n                <p>1 {tokenToDisplay.symbol} = {tokenToDisplay.price} $</p>\n              </div>\n              <div className=\"staking-datas-apr\">\n                <p>Annual percentage rate</p>\n                <p>{tokenToDisplay.apr * 100}%</p>\n              </div>\n              {\n                // <div className=\"staking-datas-estimated-rewards\">\n                //  <p>Estimated rewards</p>\n                //  <p>{Web3.utils.fromWei(Web3.utils.toBN(tokenToDisplay.estimatedFAMRewards), 'ether')}FAM</p>\n                // </div>\n              }\n              \n            </div>\n          </Card.Description>\n          <Button fluid color='purple' type=\"submit\" className=\"staking-item-button\">\n            Stake Now\n          </Button>\n        </Form>\n\n        </Card.Content>\n      </Card>\n    </section>\n  );\n}\n\n// == Export\nexport default Staking;\n","// == Import\nimport Web3 from 'web3';\nimport { Header, Card, Button, Form } from 'semantic-ui-react';\nimport { useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport findContract from '../../selectors/findContract';\nimport { useEth } from '../../contexts/EthContext';\nimport './unstake.scss';\n\n// == Composant\nfunction Staking() {\n  const dispatch = useDispatch();\n  const { token } = useParams();\n  const tokens = useSelector((state) => state.tokens);\n  const inputValue = useSelector((state) => state.unstakeInputValue);\n  const tokenToDisplay = tokens.find((item) => item.symbol === token);\n  const { state: { accounts, artifact, contract, networkID } } = useEth();\n\n  const handleChange = (evt) => {\n    dispatch({ type: 'CHANGE_UNSTAKING_VALUE', value: evt.target.value });\n  };\n\n  const handleUnstake = async () => {\n    let TokenContract;\n    let TokenStakingContract;\n\n    // On recup les instances des contracts à utiliser\n    if (token === \"DAI\") {\n      TokenContract = findContract(artifact, contract, networkID, \"DAI\");\n      TokenStakingContract = findContract(artifact, contract, networkID, \"DAIStake\");\n    } else if (token === \"ETH\") {\n      TokenStakingContract = findContract(artifact, contract, networkID, \"ETHStake\");\n    } else if (token === \"FAM\") {\n      TokenContract = findContract(artifact, contract, networkID, \"FAM\");\n      TokenStakingContract = findContract(artifact, contract, networkID, \"FAMStake\");\n    }\n    \n    \n    // On conversion en WEI\n    const value = Web3.utils.toWei(inputValue, 'ether');\n\n    // On unstake\n    const receipt = await TokenStakingContract.methods.withdraw(value).send({ from: accounts[0] });\n\n    // On recup l'event\n    const returnedValues = receipt.events.WithdrawRegistered.returnValues;\n    // On le clean\n    const cleanedWithdrawEvent = {\n        userAddress: returnedValues.userAddress,\n        amount: returnedValues.amount,\n    }\n    // Et on le mémorise dans le store\n    dispatch({ type: 'WITHDRAW_EVENT', event: cleanedWithdrawEvent });\n    // dispatch({ type: 'UNSTAKE', token: token });\n\n    // Un p'tit message pour notifier l'utilisateur\n    alert(`Vous avez bien retiré ${inputValue} ${token}`);\n\n\n    // On refresh pour recup les bonnes infos depuis le SM\n    // La recup se fait dans le composant Header\n    window.location.replace(\"https://remitekky.github.io/Family-staking/\");\n    return false;\n  };\n\n  return (\n    <section className=\"unstake\">\n      <Header as='h1' className=\"unstake-title\">\n        Unstake your <strong>{tokenToDisplay.symbol}</strong>\n        <Header.Subheader className=\"hero-subtitle\">\n          Récupérez vos tokens. Attention, tous les dépots sont bloqués pendant une période de 2 jours.\n        </Header.Subheader>\n      </Header>\n\n      <Card className=\"unstake-item\" raised centered>\n        <Card.Content textAlign=\"center\">\n\n        <Form onSubmit={handleUnstake}>\n          <Form.Field>\n            <input placeholder='Amount' value={inputValue} onChange={handleChange} />\n          </Form.Field>\n          <Card.Description>\n            <div className=\"unstake-datas\">\n              <div className=\"unstake-datas-total-stake\">\n                <p>Total staked</p>\n                <p>{Web3.utils.fromWei(Web3.utils.toBN(tokenToDisplay.stakedBalance), 'ether')} {tokenToDisplay.symbol}</p>\n              </div>\n              <div className=\"unstake-datas-price\">\n                <p>Exchange rate</p>\n                <p>1 {tokenToDisplay.symbol} = {tokenToDisplay.price} $</p>\n              </div>\n              <div className=\"unstake-datas-apr\">\n                <p>Annual percentage rate</p>\n                <p>{tokenToDisplay.apr * 100}%</p>\n              </div>\n              {\n                // <div className=\"unstake-datas-estimated-rewards\">\n                //   <p>Estimated rewards</p>\n                //   <p>{Web3.utils.fromWei(Web3.utils.toBN(tokenToDisplay.estimatedFAMRewards), 'ether')}FAM</p>\n                // </div>\n              }\n            </div>\n          </Card.Description>\n          <Button fluid color='purple' type=\"submit\" className=\"unstake-item-button\">\n            Unstake Now\n          </Button>\n        </Form>\n\n        </Card.Content>\n      </Card>\n    </section>\n  );\n}\n\n// == Export\nexport default Staking;\n","// == Import\nimport Web3 from 'web3';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Header, Segment, Card, Button } from 'semantic-ui-react';\nimport './rewards.scss';\n\n// == Composant\nfunction Rewards() {\n  const dispatch = useDispatch();\n  const tokens = useSelector((state) => state.tokens);\n  const FAM = tokens.find((token) => token.symbol === \"FAM\");\n\n  return (\n    <section className=\"rewards\">\n      <Header as='h1' className=\"rewards-title\">\n        Your Rewards\n        <Header.Subheader className=\"rewards-subtitle\">\n          Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis, fuga.\n        </Header.Subheader>\n      </Header>\n\n      <Segment className=\"rewards-datas-wrapper\" raised>\n        <Card.Group centered itemsPerRow={1}>\n          {tokens.map((token) => {\n            return (\n              <Card color='purple' key={token.symbol}>\n                <Card.Content className=\"rewards-datas-inner\">\n                  <div className=\"rewards-datas\">\n                    <div className=\"rewards-token\">\n                      <p><strong>{token.symbol}</strong></p>\n                    </div>\n                    <div className=\"rewards-total-staked\">\n                      <p><strong>Total Staked</strong></p>\n                      <p>{Web3.utils.fromWei(Web3.utils.toBN(token.totalStaked), 'ether')} ETH</p>\n                      <p>{Web3.utils.fromWei(Web3.utils.toBN(token.totalStaked), 'ether') * token.price} $</p>\n                    </div>\n                    {\n                      // <div className=\"rewards-FAM-earned\">\n                      //   <p><strong>Estimated FAM to earn</strong></p>\n                      //   <p>{Web3.utils.fromWei(Web3.utils.toBN(token.earnedFAM), 'ether')} FAM</p>\n                      //   <p>{Web3.utils.fromWei(Web3.utils.toBN(token.earnedFAM), 'ether') * FAM.price} $</p>\n                      // </div>\n                  }\n                    <div className=\"rewards-FAM-price\">\n                      <p><strong>FAM price</strong></p>\n                      <p>{FAM.price} $</p>\n                    </div>\n                  </div>\n                  <Button\n                    color='purple'\n                    className=\"rewards-button\"\n                    floated='right'\n                    as={Link}\n                    to={`/Family-staking/unstake/${token.symbol}`}\n                    >\n                    Unstake\n                  </Button>\n                </Card.Content>\n              </Card>\n            )\n          })}\n        </Card.Group>\n      </Segment>\n      \n    </section>\n  );\n}\n\n// == Export\nexport default Rewards;\n","// == Import\nimport Web3 from 'web3';\nimport { useSelector } from 'react-redux';\nimport { Header, Table } from 'semantic-ui-react';\nimport './stakeHistory.scss';\n\n// == Composant\nfunction StakeHistory() {\n  const depositEvents = useSelector((state) => state.depositEvents);\n  const withdrawEvents = useSelector((state) => state.withdrawEvents);\n\n  return (\n    <section className=\"staking-history\">\n      <Header as='h1' className=\"staking-history__title\">\n        Protocol's history\n        <Header.Subheader className=\"staking-history__subtitle\">\n          Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis, fuga.\n        </Header.Subheader>\n      </Header>\n\n      <Header as='h2' className=\"staking-history__title\" textAlign='center'>Stake</Header>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>User address</Table.HeaderCell>\n            <Table.HeaderCell>Amount</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {depositEvents.map((item) => (\n            <Table.Row>\n              <Table.Cell>{item.userAddress}</Table.Cell>\n              <Table.Cell>{Web3.utils.fromWei(Web3.utils.toBN(item.amount), 'ether')} {item.symbol}</Table.Cell>\n          </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n\n      <Header as='h2' className=\"staking-history__title\" textAlign='center'>Unstake</Header>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>User address</Table.HeaderCell>\n            <Table.HeaderCell>Amount</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {withdrawEvents.map((item) => (\n            <Table.Row>\n              <Table.Cell>{item.userAddress}</Table.Cell>\n              <Table.Cell>{Web3.utils.fromWei(Web3.utils.toBN(item.amount), 'ether')} {item.symbol}</Table.Cell>\n          </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n\n      \n\n    </section>\n  );\n}\n\n// == Export\nexport default StakeHistory;\n","// == Import\nimport { List, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n// import PropTypesLib from 'prop-types';\nimport './footer.scss';\n\n// == Composant\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"footer-logo\">\n        <Icon name='ethereum' size='large' />\n        <Link to=\"/\" className=\"footer-link\">Family Staking</Link>\n      </div>\n\n      <List horizontal relaxed='very'>\n        <List.Item>\n          <a className=\"footer-link\" target=\"_blank\" href=\"https://github.com/Remitekky/Family-staking\" rel=\"noreferrer\">GitHub</a>\n        </List.Item>\n        <List.Item>\n          <Link className=\"footer-link\" to=\"/Family-staking/#\">Team</Link>\n        </List.Item>\n        <List.Item>\n          <Link className=\"footer-link\" to=\"/Family-staking/#\">Term of Use</Link>\n        </List.Item>\n        <List.Item>\n          <Link className=\"footer-link\" to=\"/Family-staking/#\">Privacy</Link>\n        </List.Item>\n      </List>\n\n    </footer>\n  );\n}\n\n// == Export\nexport default Footer;\n","import { EthProvider } from \"./contexts/EthContext\";\nimport { Routes, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Staking from './components/Staking';\nimport Unstake from './components/Unstake';\nimport Rewards from './components/Rewards';\nimport StakeHistory from './components/StakeHistory';\nimport Footer from './components/Footer';\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <EthProvider>\n      <div id=\"App\" >\n\n        <Header />\n\n        <Routes>\n          <Route path=\"/Family-staking/\" element={<Home />} />\n          <Route path=\"/Family-staking/stake/:token\" element={<Staking />} />\n          <Route path=\"/Family-staking/unstake/:token\" element={<Unstake />} />\n          <Route path=\"/Family-staking/rewards\" element={<Rewards />} />\n          <Route path=\"/Family-staking/history\" element={<StakeHistory />} />\n          <Route path=\"/Family-staking/*\" element={<div>404</div>} />\n        </Routes>\n\n        <Footer />\n\n      </div>\n    </EthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './store';\nimport './index.css';\nimport App from './App';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>\n);\n"],"sourceRoot":""}